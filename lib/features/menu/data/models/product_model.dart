import '../../../../config/database/api/api_keys.dart';
import '../../domain/entities/product.dart';

class ProductModel extends Product {
  ProductModel(
      {required super.proId,
      required super.barcode,
      required super.proArName,
      required super.proEnName,
      required super.catId,
      required super.categoryAr,
      required super.categoryEn,
      required super.father,
      required super.price,
      required super.price2,
      required super.price3,
      required super.price4,
      required super.taxable,
      required super.taxPercentage,
      required super.discountable,
      required super.icon,
      required super.backColor,
      required super.foreColor,
      required super.printer,
      required super.printer2,
      required super.tag,
      required super.question1,
      required super.question2,
      required super.question3,
      required super.question4,
      required super.question5,
      required super.standardItem,
      required super.isActive,
      required super.rawMaterial,
      required super.compositeMaterial,
      required super.compo,
      required super.isMaximumQty,
      required super.question1Qty,
      required super.question2Qty,
      required super.question3Qty,
      required super.question4Qty,
      required super.question5Qty});

  factory ProductModel.fromJson(Map<String, dynamic> json) => ProductModel(
        proId: json[ApiKeys.proId],
        barcode: json[ApiKeys.barcode],
        proArName: json[ApiKeys.proArName],
        proEnName: json[ApiKeys.proEnName],
        catId: json[ApiKeys.catId],
        categoryAr: json[ApiKeys.categoryAr],
        categoryEn: json[ApiKeys.categoryEn],
        father: json[ApiKeys.father],
        price: json[ApiKeys.price]?.toDouble() ?? 0.0,
        price2: json[ApiKeys.price2]?.toDouble() ?? 0.0,
        price3: json[ApiKeys.price3]?.toDouble() ?? 0.0,
        price4: json[ApiKeys.price4]?.toDouble() ?? 0.0,
        taxable: bool.tryParse(json[ApiKeys.taxable].toString()) ?? false,
        taxPercentage: json[ApiKeys.taxPercentage]?.toDouble(),
        discountable:
            bool.tryParse(json[ApiKeys.discountable].toString()) ?? false,
        icon: json[ApiKeys.icon],
        backColor: json[ApiKeys.backColor],
        foreColor: json[ApiKeys.foreColor],
        printer: json[ApiKeys.printer],
        printer2: json[ApiKeys.printer2],
        tag: json[ApiKeys.tag],
        question1: json[ApiKeys.question1].toString(),
        question2: json[ApiKeys.question2].toString(),
        question3: json[ApiKeys.question3].toString(),
        question4: json[ApiKeys.question4].toString(),
        question5: json[ApiKeys.question5].toString(),
        standardItem:
            bool.tryParse(json[ApiKeys.standardItem].toString()) ?? false,
        isActive: bool.tryParse(json[ApiKeys.isActive].toString()) ?? false,
        rawMaterial:
            bool.tryParse(json[ApiKeys.rawMaterial].toString()) ?? false,
        compositeMaterial:
            bool.tryParse(json[ApiKeys.compositeMaterial].toString()) ?? false,
        compo: bool.tryParse(json[ApiKeys.compo].toString()) ?? false,
        isMaximumQty:
            bool.tryParse(json[ApiKeys.isMaximumQty].toString()) ?? false,
        question1Qty: json[ApiKeys.question1Qty].toString(),
        question2Qty: json[ApiKeys.question2Qty].toString(),
        question3Qty: json[ApiKeys.question3Qty].toString(),
        question4Qty: json[ApiKeys.question4Qty].toString(),
        question5Qty: json[ApiKeys.question5Qty].toString(),
      );
  @override
  Map<String, dynamic> toJson() => {
        ApiKeys.proId: proId,
        ApiKeys.barcode: barcode,
        ApiKeys.proArName: proArName,
        ApiKeys.proEnName: proEnName,
        ApiKeys.catId: catId,
        ApiKeys.categoryAr: categoryAr,
        ApiKeys.categoryEn: categoryEn,
        ApiKeys.father: father,
        ApiKeys.price: price,
        ApiKeys.price2: price2,
        ApiKeys.price3: price3,
        ApiKeys.price4: price4,
        ApiKeys.taxable: taxable.toString(),
        ApiKeys.taxPercentage: taxPercentage,
        ApiKeys.discountable: discountable.toString(),
        ApiKeys.icon: icon,
        ApiKeys.backColor: backColor,
        ApiKeys.foreColor: foreColor,
        ApiKeys.printer: printer,
        ApiKeys.printer2: printer2,
        ApiKeys.tag: tag,
        ApiKeys.question1: question1,
        ApiKeys.question2: question2,
        ApiKeys.question3: question3,
        ApiKeys.question4: question4,
        ApiKeys.question5: question5,
        ApiKeys.standardItem: standardItem.toString(),
        ApiKeys.isActive: isActive.toString(),
        ApiKeys.rawMaterial: rawMaterial.toString(),
        ApiKeys.compositeMaterial: compositeMaterial.toString(),
        ApiKeys.compo: compo.toString(),
        ApiKeys.isMaximumQty: isMaximumQty.toString(),
        ApiKeys.question1Qty: question1Qty,
        ApiKeys.question2Qty: question2Qty,
        ApiKeys.question3Qty: question3Qty,
        ApiKeys.question4Qty: question4Qty,
        ApiKeys.question5Qty: question5Qty,
      };

  @override
  ProductModel copyWith({
    String? proId,
    String? barcode,
    String? proArName,
    String? proEnName,
    String? catId,
    String? categoryAr,
    String? categoryEn,
    String? father,
    double? price,
    double? price2,
    double? price3,
    double? price4,
    bool? taxable,
    double? taxPercentage,
    bool? discountable,
    String? icon,
    String? backColor,
    String? foreColor,
    String? printer,
    String? printer2,
    String? tag,
    String? question1,
    String? question2,
    String? question3,
    String? question4,
    String? question5,
    bool? standardItem,
    bool? isActive,
    bool? rawMaterial,
    bool? compositeMaterial,
    bool? compo,
    bool? isMaximumQty,
    String? question1Qty,
    String? question2Qty,
    String? question3Qty,
    String? question4Qty,
    String? question5Qty,
  }) =>
      ProductModel(
        proId: proId ?? this.proId,
        barcode: barcode ?? this.barcode,
        proArName: proArName ?? this.proArName,
        proEnName: proEnName ?? this.proEnName,
        catId: catId ?? this.catId,
        categoryAr: categoryAr ?? this.categoryAr,
        categoryEn: categoryEn ?? this.categoryEn,
        father: father ?? this.father,
        price: price ?? this.price,
        price2: price2 ?? this.price2,
        price3: price3 ?? this.price3,
        price4: price4 ?? this.price4,
        taxable: taxable ?? this.taxable,
        taxPercentage: taxPercentage ?? this.taxPercentage,
        discountable: discountable ?? this.discountable,
        icon: icon ?? this.icon,
        backColor: backColor ?? this.backColor,
        foreColor: foreColor ?? this.foreColor,
        printer: printer ?? this.printer,
        printer2: printer2 ?? this.printer2,
        tag: tag ?? this.tag,
        question1: question1 ?? this.question1,
        question2: question2 ?? this.question2,
        question3: question3 ?? this.question3,
        question4: question4 ?? this.question4,
        question5: question5 ?? this.question5,
        standardItem: standardItem ?? this.standardItem,
        isActive: isActive ?? this.isActive,
        rawMaterial: rawMaterial ?? this.rawMaterial,
        compositeMaterial: compositeMaterial ?? this.compositeMaterial,
        compo: compo ?? this.compo,
        isMaximumQty: isMaximumQty ?? this.isMaximumQty,
        question1Qty: question1Qty ?? this.question1Qty,
        question2Qty: question2Qty ?? this.question2Qty,
        question3Qty: question3Qty ?? this.question3Qty,
        question4Qty: question4Qty ?? this.question4Qty,
        question5Qty: question5Qty ?? this.question5Qty,
      );
}
