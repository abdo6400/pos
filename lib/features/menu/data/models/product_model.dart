import '../../../../config/database/api/api_keys.dart';
import '../../domain/entities/product.dart';

class ProductModel extends Product {
  ProductModel(
      {
        required super.proId,
        required super.barcode,
        required super.proArName,
        required super.proEnName,
        required super.catId,
        required super.categoryAr,
        required super.categoryEn,
        required super.father,
        required super.unitId,
        required super.factor,
        required super.isSmall,
        required super.price,
        required super.price2,
        required super.price3,
        required super.price4,
        required super.taxable,
        required super.taxPercentage,
        required super.discountable,
        required super.icon,
        required super.backColor,
        required super.foreColor,
        required super.tag,
        required super.hotGroup,
        required super.isActive,
        required super.standardItem,
        required super.isService,

      });

  factory ProductModel.fromJson(Map<String, dynamic> json) => ProductModel(
    proId: json[ApiKeys.proId],
    barcode: json[ApiKeys.barcode],
    proArName: json[ApiKeys.proArName],
    proEnName: json[ApiKeys.proEnName],
    catId: json[ApiKeys.catId],
    categoryAr: json[ApiKeys.categoryAr],
    categoryEn: json[ApiKeys.categoryEn],
    father: json[ApiKeys.father],
    unitId: json[ApiKeys.unitId],
    factor: json[ApiKeys.factor],
    isSmall: bool.tryParse(json[ApiKeys.isSmall].toString()) ?? false,
    price: json[ApiKeys.price]?.toDouble() ?? 0.0,
    price2: json[ApiKeys.price2]?.toDouble() ?? 0.0,
    price3: json[ApiKeys.price3]?.toDouble() ?? 0.0,
    price4: json[ApiKeys.price4]?.toDouble() ?? 0.0,
    taxable: bool.tryParse(json[ApiKeys.taxable].toString()) ?? false,
    taxPercentage: json[ApiKeys.taxPercentage]?.toDouble(),
    discountable:
    bool.tryParse(json[ApiKeys.discountable].toString()) ?? false,
    icon: json[ApiKeys.icon],
    backColor: json[ApiKeys.backColor],
    foreColor: json[ApiKeys.foreColor],
    tag: json[ApiKeys.tag],
    isActive: bool.tryParse(json[ApiKeys.isActive].toString()) ?? false,
    standardItem:
    bool.tryParse(json[ApiKeys.standardItem].toString()) ?? false,
    hotGroup: bool.tryParse(json[ApiKeys.hotGroup].toString()) ?? false,
    isService: bool.tryParse(json[ApiKeys.isService].toString()) ?? false,
      );
  @override
  Map<String, dynamic> toJson() => {
    ApiKeys.proId: proId,
    ApiKeys.barcode: barcode,
    ApiKeys.proArName: proArName,
    ApiKeys.proEnName: proEnName,
    ApiKeys.catId: catId,
    ApiKeys.categoryAr: categoryAr,
    ApiKeys.categoryEn: categoryEn,
    ApiKeys.father: father,
    ApiKeys.unitId: unitId,
    ApiKeys.factor: factor,
    ApiKeys.isSmall: isSmall,
    ApiKeys.price: price,
    ApiKeys.price2: price2,
    ApiKeys.price3: price3,
    ApiKeys.price4: price4,
    ApiKeys.taxable: taxable.toString(),
    ApiKeys.taxPercentage: taxPercentage,
    ApiKeys.discountable: discountable.toString(),
    ApiKeys.icon: icon,
    ApiKeys.backColor: backColor,
    ApiKeys.foreColor: foreColor,
    ApiKeys.tag: tag,
    ApiKeys.standardItem: standardItem.toString(),
    ApiKeys.isActive: isActive.toString(),
    ApiKeys.hotGroup: hotGroup,
    ApiKeys.isService: isService,
      };

  @override
  ProductModel copyWith({
    String? proId,
    String? barcode,
    String? proArName,
    String? proEnName,
    String? catId,
    String? categoryAr,
    String? categoryEn,
    String? father,
    int? unitId,
    double? factor,
    bool? isSmall,
    double? price,
    double? price2,
    double? price3,
    double? price4,
    bool? taxable,
    double? taxPercentage,
    bool? discountable,
    String? icon,
    String? backColor,
    String? foreColor,
    String? tag,
    bool? standardItem,
    bool? hotGroup,
    bool? isActive,
    bool? isService,
  }) =>
      ProductModel(
          proId: proId ?? this.proId,
          barcode: barcode ?? this.barcode,
          proArName: proArName ?? this.proArName,
          proEnName: proEnName ?? this.proEnName,
          catId: catId ?? this.catId,
          categoryAr: categoryAr ?? this.categoryAr,
          categoryEn: categoryEn ?? this.categoryEn,
          father: father ?? this.father,
          unitId: unitId ?? this.unitId,
          factor: factor ?? this.factor,
          isSmall: isSmall ?? this.isSmall,
          price: price ?? this.price,
          price2: price2 ?? this.price2,
          price3: price3 ?? this.price3,
          price4: price4 ?? this.price4,
          taxable: taxable ?? this.taxable,
          taxPercentage: taxPercentage ?? this.taxPercentage,
          discountable: discountable ?? this.discountable,
          icon: icon ?? this.icon,
          backColor: backColor ?? this.backColor,
          foreColor: foreColor ?? this.foreColor,
          tag: tag ?? this.tag,
          standardItem: standardItem ?? this.standardItem,
          isActive: isActive ?? this.isActive,
          hotGroup: hotGroup ?? this.hotGroup,
          isService: isService ?? this.isService
      );
}
